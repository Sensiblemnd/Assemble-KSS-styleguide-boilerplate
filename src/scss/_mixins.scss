// Custom SASS mixins
// Define the custom mixins for your project here.

@mixin abscenter ($oldBrowser:false){
	@if($oldBrowser){
		margin: auto;
		position: absolute;
		top: 0; left: 0; bottom: 0; right: 0;

	}@else{
		position: absolute;
		top: 50%; left: 50%;
		transform: translate(-50%,-50%);
	}

}

@mixin hide-text() {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}


@mixin rem($sizeValue) {
  font-size: ($sizeValue) + px;
  font-size: (($sizeValue/16) * 1) + rem;
}

/*mixing is from http://codepen.io/erindotio/pen/BLFqe*/

@mixin css-arrow($box-edge         : bottom,
								 $edge-side        : center,
								 $arrow-size       : 10px,
								 $edge-side-offset : 0,
								 $fill-color       : black,
								 $border-color     : none,
								 $border-style     : border) {

// initiate internal variables
	$box-edge-inverse: bottom;
	$edge-side-pos: $edge-side;
	$edge-side-pos-value: 0;

// establish inverse variables
	@if      $box-edge == top    { $box-edge-inverse: bottom; }
	@else if $box-edge == right  { $box-edge-inverse: left;   }
	@else if $box-edge == bottom { $box-edge-inverse: top;    }
	@else if $box-edge == left   { $box-edge-inverse: right;  }

// calculate remaining internal variables
	@if ($box-edge == 'top' or
			 $box-edge == 'bottom') {
		@if $edge-side == center {
			$edge-side-pos: left;
			$edge-side-pos-value: 50%;
			$edge-side-offset: (-$arrow-size);
		}
	}
	@if ($box-edge == 'left' or
			 $box-edge == 'right') {
		@if $edge-side == center {
			$edge-side-pos: top;
			$edge-side-pos-value: 50%;
			$edge-side-offset: (-$arrow-size);
		}
	}

	&:after, &:before {
		content: "";
		height: 0;
		width: 0;
		position: absolute;
		z-index: 10;
		pointer-events: none;
		border: solid transparent;
	}

	&:after  {
		//border-color: rgba(#fff, 0);
		border-width: $arrow-size - 1;
		#{$box-edge}: (-$arrow-size) - $arrow-size + 2;
		border-#{$box-edge-inverse}-color: $fill-color;
		#{$edge-side-pos}: $edge-side-pos-value;
		margin-#{$edge-side-pos}: $edge-side-offset + 1;
	}

	@if $border-style == flag {
		@include border-radius(2px);
		&:before {
			//border-color: rgba(#fff, 0);
			border-width: $arrow-size - 1;
			#{$box-edge}: (-$arrow-size) - $arrow-size + 2;
			border-#{$box-edge-inverse}-color: $border-color;
			#{$edge-side-pos}: $edge-side-pos-value;
			margin-#{$edge-side-pos}: $edge-side-offset + 2;
		}
	} @else {
		&:before {
			//border-color: rgba(#fff, 0);
			border-width: $arrow-size;
			#{$box-edge}: (-$arrow-size) - $arrow-size;
			border-#{$box-edge-inverse}-color: $border-color;
			#{$edge-side-pos}: $edge-side-pos-value;
			margin-#{$edge-side-pos}: $edge-side-offset;
		}
	}
}



@mixin quantity-query( $number, $comparison: 'equal' ) {
	$nth: '';
	
	@if index( ('greater' 'more' '>'), $comparison ) {
		$nth: 'n + #{$number}';
	} @else if index( ('less' 'fewer' '<'), $comparison ) {
		$nth: '-n + #{$number}';
	} @else if index( ('equal' 'same' '='), $comparison ) {
		$nth: $number;
	} @else {
		@warn "Sorry, that's an invalid $comparison value."
	}
	
	&:nth-last-child(#{$nth}):first-child {
		&,
		& ~ * {
			@content;
		}
	}
}

@mixin qq-equal( $number ) {
	@include quantity-query( $number, equal ) {
		@content;
	}
}

@mixin qq-greater( $number ) {
	@include quantity-query( $number, greater ) {
		@content;
	}
}

@mixin qq-less( $number ) {
	@include quantity-query( $number, less ) {
		@content;
	}
}